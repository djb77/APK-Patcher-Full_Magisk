#!/sbin/sh

TMPDIR=/dev/tmp
MOUNTPATH=/dev/magisk_img

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "***********************************"
  ui_print " Please install the latest Magisk! "
  ui_print "***********************************"
  exit 1
}

imageless_magisk() {
  [ $MAGISK_VER_CODE -gt 18100 ]
  return $?
}

##########################################################################################
# Environment

test "$ANDROID_ROOT" || ANDROID_ROOT=/system;
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_progress() { echo "set_progress $1" > $OUTFD; }
abort() { ui_print " "; ui_print "$*"; exit 1; }
setup_mountpoint() {
  test -L $1 && $bb mv -f $1 ${1}_link;
  if [ ! -d $1 ]; then
    rm -f $1;
    mkdir $1;
  fi;
}
is_mounted() { $bb mount | $bb grep -q " $1 "; }
umount_all() {
  ($bb umount /system;
  $bb umount -l /system;
  if [ -e /system_root ]; then
    $bb umount /system_root;
    $bb umount -l /system_root;
  fi;
  umount /vendor;
  umount -l /vendor;
  if [ "$umount_data" ]; then
    $bb umount /data;
    $bb umount -l /data;
  fi) 2>/dev/null;
}
restore_env() {
  test "$savedpath" && export LD_LIBRARY_PATH="$savedpath";
  test "$savedpre" && export LD_PRELOAD="$savedpre";
  umount_all;
  ($bb mv -f /system_link /system;
  $bb mv -f /system_root_link /system_root) 2>/dev/null;
}

##########################################################################################

OUTFD=$2
ZIPFILE=$3

mount /data 2>/dev/null

# Load utility functions
if [ -f /data/adb/magisk/util_functions.sh ]; then
  . /data/adb/magisk/util_functions.sh
  NVBASE=/data/adb
else
  require_new_magisk
fi

# Preperation for flashable zips
setup_flashable

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh 'common/*' -d $TMPDIR >&2

[ ! -f $TMPDIR/install.sh ] && abort "! Unable to extract zip file!"
# Load install script
. $TMPDIR/install.sh

if imageless_magisk; then
  $BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
  MODULEROOT=$NVBASE/$MODDIRNAME
else
  $BOOTMODE && IMGNAME=magisk_merge.img || IMGNAME=magisk.img
  IMG=$NVBASE/$IMGNAME
  request_zip_size_check "$ZIPFILE"
  mount_magisk_img
  MODULEROOT=$MOUNTPATH
fi

MODID=`grep_prop id $TMPDIR/module.prop`
MODPATH=$MODULEROOT/$MODID

print_modname

ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "and APK-Patcher Lite  (@djb77)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

# Remove placeholder
rm -f $MODPATH/system/placeholder 2>/dev/null

##########################################################################################
# APK-Patcher Lite Main
##########################################################################################

magiskdir=$PWD

# working directory variables
ap=$TMPDIR/apkpatcher
bin=$ap/tools
patch=$ap/patch
script=$ap/script

show_progress 1.34 0

# extract apkpatcher
mkdir -p $ap
cd $ap
ui_print "- Extracting Files for APK-Patcher Lite"
unzip -o "$ZIP" envvar.sh extracmd.sh 'patch/*' 'script/*' 'tools/*' -d $ap >&2

# set up extracted files and directories
chmod -R 755 $bin $script $ap/*.sh

# import variables
. $ap/envvar.sh

ui_print "- Patching Files"
amount=$((100 / `echo $apklist | wc -w`))
subamt=$(awk -v num=$amount 'BEGIN { print num / 10}')
for apkp_target in $apklist; do
  ui_print " "
  ui_print "- $apkp_target"
  apkname=$(basename $apkp_target .apk)

  # copy in apkp_target system file to patch
  sysfile=`find /system -mindepth 2 -name $apkp_target`
  cp -fp $sysfile $ap
  progress=$((progress + subamt))
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}')

  # System-As-Root check
umount_all;
setup_mountpoint $ANDROID_ROOT;
if ! is_mounted $ANDROID_ROOT; then
  $bb mount -o ro -t auto $ANDROID_ROOT;
fi;
case $ANDROID_ROOT in
  /system_root) setup_mountpoint /system;;
  /system)
    if [ -f /system/system/build.prop ]; then
      setup_mountpoint /system_root;
      $bb mount --move /system /system_root;
      if [ $? != 0 ]; then
        $bb umount /system;
        $bb umount -l /system 2>/dev/null;
        $bb mount -o ro -t auto /dev/block/bootdevice/by-name/system /system_root;
      fi;
    fi;
  ;;
esac;
if is_mounted /system_root; then
  $bb mount -o bind /system_root/system /system;
fi;
$bb mount -o ro -t auto /vendor 2>/dev/null;
if ! is_mounted /data; then
  $bb mount /data;
  umount_data=1;
fi;

savedpath="$LD_LIBRARY_PATH";
savedpre="$LD_PRELOAD";
unset LD_LIBRARY_PATH;
unset LD_PRELOAD;

  # make a backup if set
  if [ "$backup" == 1 ]; then
    ui_print "  Backup APK"
    mkdir -p $apkbak
    cp -fp $sysfile $apkbak
  fi
  progress=$((progress + subamt))
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}')

  # file patches
  if [ -d $patch/$apkname ]; then
    mv $ap/$apkname.apk $ap/$apkname.zip

  # delete unwanted files
    if [ -f $script/$apkname.sh ]; then
      ui_print "  Remove files"
      . $script/$apkname.sh
      for remove in $fileremove; do
        $bin/zip -d $ap/$apkname.zip $remove
      done
    fi

  # continue patching
    ui_print "  Inject files"
    cd $patch/$apkname
    $bin/zip -r -9 $ap/$apkname.zip *
    if [ -f resources.arsc ]; then
      $bin/zip -r -0 $ap/$apkname.zip resources.arsc
    fi
    cd $ap
    mv $ap/$apkname.zip $ap/$apkname.apk
  fi
  progress=$((progress + subamt))
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}')

  # zipalign updated file
  ui_print "  Zipaligning APK"
  cp -f $apkp_target $apkname-preopt.apk
  rm $apkp_target
  $bin/zipalign -p 4 $apkname-preopt.apk $apkp_target
  progress=$((progress + subamt))
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}')
 
  # copy patched file back to /system
  ui_print "  Copy APK to Magisk Module"
  mkdir -p $MODPATH$sysfile
  cd $MODPATH$sysfile
  cd ..
  rm -rf *
  magiskcopy=$PWD
  cd $ap
  cp -fp $apkp_target $magiskcopy
  progress=$((progress + subamt))
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}')

  # remove temp files if cleanup is set
  if [ "$cleanup" == 1 ]; then
    ui_print "  Clean up work area"
    rm -rf $apkp_target $apkname-preopt.apk
  fi;
  progress=$((progress + subamt))
  set_progress $(awk -v num=$progress 'BEGIN { print num / 100}')
done;

# extra required non-patch changes
ui_print " "
ui_print "- Run extra commands"
. $ap/extracmd.sh
set_progress 1.2

# cleanup as necessary
if [ "$cleanup" == 1 ]; then
  ui_print "- Cleaning up..."
  rm -rf $ap 
fi

ui_print " "

##########################################################################################
# Back to Magisk
##########################################################################################

# Custom uninstaller
[ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh

# Auto Mount
if imageless_magisk; then
  $SKIPMOUNT && touch $MODPATH/skip_mount
else
  $SKIPMOUNT || touch $MODPATH/auto_mount
fi

# prop files
$PROPFILE && cp -af $TMPDIR/system.prop $MODPATH/system.prop

# Module info
cp -af $TMPDIR/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  if imageless_magisk; then
    mktouch $NVBASE/modules/$MODID/update
    cp -af $TMPDIR/module.prop $NVBASE/modules/$MODID/module.prop
  else
    mktouch /sbin/.magisk/img/$MODID/update
    cp -af $TMPDIR/module.prop /sbin/.magisk/img/$MODID/module.prop
  fi
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $TMPDIR/post-fs-data.sh $MODPATH/post-fs-data.sh

# service mode scripts
$LATESTARTSERVICE && cp -af $TMPDIR/service.sh $MODPATH/service.sh

on_install

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

cd /
imageless_magisk || unmount_magisk_img
$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR $MOUNTPATH
restore_env;

ui_print "- Done"
exit 0
